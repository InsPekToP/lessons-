#2main10_1s.py
#SOLID-принципы в ООП - описывают общее верное написание кода внутри программ
#1.Single responsibility(единственной обязанности) - каждый обьект должен иметь одно действие,и оно должно быть 
#полностью инкапсулировано в 1м классе.Любой ваш клас должен описывать 1ну задачу
#Например,если вы работаете с DB,значит нужно создать класс и в него прописать все методы для работы с BD
#не нужно разбивать работу с DB на 2 или более класса

# class Db{
#     -здесь вы описываете методы
#     -конструкторы
#     -и прочие вещи

#     -все это должно соответствовать лишь вашему классу DB,тоесть внутри класса лишь данные относ. одной обязанности
# }
# 1 класс - 1 задача

#2.Open-close(открытости-закрытости) - програмные сущности(классы,модули,ф-ции) должны быть открыты для расширения,
#но закрыты для изменения

#3.Liskov substitution(принцип подстановки Лисков) - если есть классы-наследники,то все методы должны быть с ожидаемыми
#поведениями.В наследниках сохраняем базовый ф-нал

#4.Interface segregation(разделение интерфейса) - лучше иметь несколько маленьких классов,нежели 1 огромный

#5.Dependency inversion(инверсия зависимостей) - стоит строить классы и конструкторы в них,кот. будут максимально гибкими
#Не надо забывать указывать установку пар-ов через конструкторы в ваших классах.Конструктор должен не просто существовать,
#а дополнять ваш класс,разширяя его функционал

#Правило KISS - делайте вещи маленькими и простыми
#YAGNI - не нужно писать ф-ции на потом.Не создавайте лишнюю пер-ную,если можно написать код в одну строчку
#DRY - не повторяйте самого себя.Если нужно написать повторяющийся код,его лучше вынести в отдельную ф-ию
#или отдельный файл
