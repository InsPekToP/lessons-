#3main1_1s.py
#Python SQLlite3
#Эта база данных встроенная в питон.Поэтому,чтобы ее подключить,надо просто прописать импорт

import sqlite3 as sql
#теперь надо создать файл(будет зранить в себе всю БД) и курсор(будем обращаться к БД)
#создание файла с БД
conn = sql.connect('itproger.sqlite') #.connect - обращаемся к БД,расширение .sqlite
#после подключения к этому файлу,нужно создать курсор(некий обьект,за счет которого мы можем обращаться к БД,и создавать
#новые таблицы и т.д.)
cur = conn.cursor() #создаем пер-ю,обращаемся к conn,и к такому методу cursor()

#СТРУКТУРА БД
#Основная папка "itproget">затем таблицы(подпапки)>дальше в них можем поместить какие-либо записи(поля(имя,логин,пароль и тд))

#Теперь надо создать таблицу.Нужны SQL - команды.Нужно обратиться к курсору и к методу .execute()
cur.execute('''CREATE TABLE IF NOT EXISTS users (
    id int auto_increment primary key,
    name varchar(50),
    password varchar(50)
) ''') 
#надо создать таблицу внутри нашей БД.'''CREATE TABLE''' - комманда по созданию таблицы(
#указывается в 3х кавычках и с большими буквами).далее указываем таблицу users и далее указываем все поля в таблице()

#Еще для таблицы нужно указывать спец. индификатор(ID)
#id int auto_increment  - указали id,дальше тип данных int,и затем auto_increment - будет создаваться автоматически,
# и будет устанавливаться 1 2 ...И еще нужно,чтобы это id было как первичный ключ,чтобы его можно было изменять(primary key)
#Дальше записываем новые поля через запятую.name -название поля.varchar(255)-текст с макс кол-ом символов 255 или меньше.
#чтобы неограниченное колво- символов пишем >>>>text<<<<<.
#SQL-команды принято писать в вверхнем регистре.А названия полей в том регистре в кот. хотим называть поля.

#чтобы это все запустилось:
conn.commit()  #.commit() - команда для синхронизации с нашей БД
#Теперь можно запустить.Теперь при повторном запуске будет выдавать ошибку т.к. поля name и password уже были созданы
#можно удалить эти поля,но лучше прописать проверку (CREATE TABLE IF NOT EXISTS--создать таблицу,если ее не существует)

#Теперь хотим получить от польз-ля данные и записать их в таблицу
user_name = input('Введите ваше имя: ')
user_pass = input('Введите ваш пароль: ')

#обращаемся к курсору и пишем в него команду.Если короткая команда,то можно обойтись одинарными кавычками
cur.execute('INSERT INTO users(name,password) VALUES ("%s","%s")'%(user_name,user_pass))
#INSERT INTO - установить новую запись в таблицу users,дальше указываю значения,кот. подставляю VALUES.Могу сразу подставить
#(user_name,user_pass),но лучше прописать ("%s","%s")-2 строки %(user_name,user_pass),чтобы эти значения не могли поменять.
#Еще важно,чтобы сдесь ("%s","%s") были другие кавычки,или \ Т.К. будет ОШИБКА

#чтобы эта прога выполнилась надо прописать
conn.commit()
#чтобы вывести все записи на экран
print("Список пользователей:\n")
cur.execute('SELECT * FROM users') 
#SELECT name,password - Выбрать поля,если нужно все,указываем *.FROM users - из таблицы users
#Теперь нужно обработать полученные записи
#users = cur.fetchone() #для получения одной записи
users = cur.fetchall() #для получения всех записей.Автоматом помещается список,кот. содержит полностью все записи
for user in users: #перебираем полученный список
    print(f'Имя: {user[1]}/ Пароль: {user[2]}') #чтобы вывести имя,надо к прописать индекс 1,т.к. 0 это ID.



#обязательно надо указать закрытие БД
cur.close() #закрыли только курсор
conn.close() #закрыли БД
